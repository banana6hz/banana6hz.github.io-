(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{586:function(t,s,e){"use strict";e.r(s);var n=e(56),v=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("今天来学习下 Vue 有多少种组件通信的方法吧")]),t._v(" "),e("ol",[e("li",[e("b",[t._v("props/emit")]),t._v(": 主要是父子组件通信")])]),t._v(" "),e("ul",[e("li",[t._v("父向子：父组件通过"),e("code",[t._v("v-bind")]),t._v("绑定数据，子组件通过"),e("code",[t._v("prop")]),t._v("接受数据")]),t._v(" "),e("li",[t._v("子向父：子组件通过"),e("code",[t._v("emit")]),t._v("向父组件传值，父组件通过"),e("code",[t._v("@")]),t._v("接受事件\n"),e("blockquote",[e("p",[t._v("单向数据流，prop 不可修改")])])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("b",[t._v("ref")]),t._v(": 父组件访问子组件的数据和方法")])]),t._v(" "),e("ul",[e("li",[t._v("如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素")]),t._v(" "),e("li",[t._v("如果用在子组件上，引用就指向组件实例")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("b",[t._v("$children/$parent")]),t._v(": 有直系关系的组件之间可以通过此方法进行通信")])]),t._v(" "),e("ul",[e("li",[t._v("在"),e("code",[t._v("#app")]),t._v("拿到的"),e("code",[t._v("$parent")]),t._v("是"),e("b",[e("code",[t._v("new Vue()实例")])]),t._v(", 再此继续拿到的"),e("code",[t._v("$parent")]),t._v("是"),e("code",[t._v("undefined")])]),t._v(" "),e("li",[t._v("最低层的子组件拿到的"),e("code",[t._v("$chilren")]),t._v("是空数组")]),t._v(" "),e("li",[e("code",[t._v("$parent")]),t._v("拿到的是对象，"),e("code",[t._v("$children")]),t._v("拿到的是数组")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("b",[t._v("$attr/$listener")]),t._v("：用于隔代组件之间的通信")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$attr")]),t._v("主要接收没有通过 props 传递的属性，应用场景：子组件获取爷爷组件的数据。父组件传给子组件的值，子组件没有通过"),e("code",[t._v("prop")]),t._v("接收，可以继续绑定到孙子组件上，孙子组件就可以通过"),e("code",[t._v("this.$attr")]),t._v("访问父组件的数据")]),t._v(" "),e("li",[e("code",[t._v("$listener")]),t._v("主要用于子组件向爷爷组件传递事件。在爸爸组件添加"),e("code",[t._v('v-on="$listener"')]),t._v("，子组件就可以"),e("code",[t._v("emit")]),t._v("事件，然后爷爷组件通过"),e("code",[t._v("@")]),t._v("接受")]),t._v(" "),e("li",[e("code",[t._v("$listener")]),t._v("是一个对象，包含父组件和爷爷组件的"),e("code",[t._v("@")]),t._v("事件")]),t._v(" "),e("li",[e("code",[t._v("inheritAttrs")]),t._v("属性用于设置子组件的顶层标签元素中不会渲染出父组件传递过来的属性，默认是 true，该属性值不影响通信")])]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[e("b",[t._v("provide / inject")]),t._v(": 主要用于有直系关系的组件进行通信")])]),t._v(" "),e("ul",[e("li",[t._v("父组件中通过"),e("code",[t._v("provide")]),t._v("来提供变量, 然后在子组件中通过"),e("code",[t._v("inject")]),t._v("来注入变量")]),t._v(" "),e("li",[t._v("不论子组件嵌套有多深, 只要调用了"),e("code",[t._v("inject")]),t._v(" 那么就可以注入"),e("code",[t._v("provide")]),t._v("中的数据，而不局限于只能从当前父组件的"),e("code",[t._v("props")]),t._v("属性中获取数据")])]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[e("b",[t._v("EventBus")]),t._v(": 主要用于全局的事件传递和接收")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// event-bus.js")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化：首先需要创建一个事件总线并将其导出, 以便其他模块可以使用或者监听它")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Vue "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vue"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EventBus "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送事件")]),t._v("\nEventBus"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"functionName"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接受事件")]),t._v("\nEventBus"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"functionName"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收到函数functionName，则执行函数func")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除事件")]),t._v("\nEventBus"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$off")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"functionName"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ol",{attrs:{start:"7"}},[e("li",[e("b",[t._v("vuex")]),t._v(": vue 的全局状态管理")])]),t._v(" "),e("p",[t._v("总结：")]),t._v(" "),e("ul",[e("li",[t._v("父子组件的通信： prop/$emit、ref、$children/$parent、provide / inject、$attrs / $listeners")]),t._v(" "),e("li",[t._v("兄弟组件：eventBus、vuex")]),t._v(" "),e("li",[t._v("隔代组件： eventBus、vuex、provide / inject 、$attrs / $listeners")])])])}),[],!1,null,null,null);s.default=v.exports}}]);