(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{581:function(t,e,s){"use strict";s.r(e);var n=s(56),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"_1-vue-生命周期影响-js-获取-dom-元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue-生命周期影响-js-获取-dom-元素"}},[t._v("#")]),t._v(" 1.Vue 生命周期影响 js 获取 DOM 元素")]),t._v(" "),s("p",[t._v("在 Vue 项目里用原生 js 读取 Dom 元素失败"),s("br"),t._v("\n上网查了一下发现:是因为我把打印的函数写在了 created 里，在这个阶段，Dom 元素还没有实现渲染，渲染之前打印的这个数组，看到的是渲染后的数据，通俗的讲，就是这个 dom 结构还没加载完，js 就执行了。"),s("br"),t._v("\n解决办法：")]),t._v(" "),s("ul",[s("li",[t._v("把函数写在渲染完成之后的 mounted 里。")]),t._v(" "),s("li",[t._v("或者让 JS 在 HTML 执行完后再执行：使用 window.onload；")]),t._v(" "),s("li",[t._v("使用延迟脚本。或者在 vue 中使用 this.$nextTick(()=>{})来获取。")])])])}),[],!1,null,null,null);e.default=o.exports}}]);