(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{596:function(t,s,a){"use strict";a.r(s);var e=a(56),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[t._v("#")]),t._v(" Ref")]),t._v(" "),a("p",[t._v("作用：接受一个内部值，返回一个"),a("strong",[t._v("响应式")]),t._v("的、可更改的 ref "),a("strong",[t._v("对象")]),t._v("，此对象只有一个指向其内部值的属性 "),a("code",[t._v(".value")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("ref 对象是可更改的，也就是说你可以为 "),a("code",[t._v(".value")]),t._v(" 赋予新的值。它也是响应式的，即所有对 "),a("code",[t._v(".value")]),t._v(" 的操作都将被追踪，并且写操作会触发与之相关的副作用。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\ncount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),a("ul",[a("li",[t._v("js 中操作数据："),a("code",[t._v("xxx.value")]),t._v(", 模版中读取数据：不需要"),a("code",[t._v(".value")]),t._v("，直接"),a("code",[t._v("<div>"+t._s(t.xxx)+"</div>")])]),t._v(" "),a("li",[t._v("接受的数据可以是：基本类型，也可以是对象类型")]),t._v(" "),a("li",[t._v("基本类型的数据：响应式依然是靠"),a("code",[t._v("Object.defineProperty")]),t._v("的"),a("code",[t._v("get")]),t._v("和"),a("code",[t._v("set")])]),t._v(" "),a("li",[t._v("对象类型的数据：内部还是用了 vue3 的一个新函数"),a("code",[t._v("reactive")])]),t._v(" "),a("li",[t._v("如果将一个对象赋值给 "),a("code",[t._v("ref")]),t._v("，那么这个对象将通过 "),a("code",[t._v("reactive()")]),t._v(" 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的 "),a("code",[t._v("ref")]),t._v("，它们将被深层地解包。若要避免这种深层次的转换，请使用 "),a("code",[t._v("shallowRef()")]),t._v(" 来替代")])])])}),[],!1,null,null,null);s.default=n.exports}}]);